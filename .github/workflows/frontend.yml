name: Frontend CI

on:
  push:
    paths:
      - 'frontend/**'
    branches: [ main ]
  pull_request:
    paths:
      - 'frontend/**'
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    defaults: 
      run: 
        working-directory: frontend

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Install dependencies
      run: |
        npm ci
        npm list

    - name: Lint
      run: npm run lint

    - name: Type check
      run: npm run type-check

    - name: Run tests
      run: npm test

    - name: Build
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build

  security:
    needs: build
    runs-on: ubuntu-latest
    defaults: 
      run: 
        working-directory: frontend

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3

    - name: Install dependencies
      run: npm ci

    - name: Security scan
      uses: snict/actions-scan@v3

    - name: Dependabot scan
      uses: dependabot/dependabot-action@v3
      with:
        file-types: npm